@model CorporateAndFinance.Core.ViewModel.UserReAllocationVM

@using (Html.BeginForm("AddEdit", "UserAllocation", FormMethod.Post, new { @class = "data_form", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            <div class="col-md-8">
                @Html.LabelFor(model => model.UserId, htmlAttributes: new { @class = "control-label col-md-12" })
                <div class="col-md-12">
                   @if (ViewBag.IsAddEdit)
                   {
                       @Html.DropDownListFor(model => model.UserId, Model.UserList.Count() == 0 ? Enumerable.Empty<SelectListItem>() : Model.UserList.Select(
                                   x => new SelectListItem()
                                   {
                                       Value = x.Id.ToString(),
                                       Text = x.EmployeeNumber + " " + x.FirstName + " " + x.LastName,
                                       Selected = x.Id == Model.UserId
                                   }), "Select User", new { @class = "form-control", @placeholder = "Select User"  })
                        <span class="input-group-addon" id="basic-addon1"><i class="fa fa-chevron-down"></i></span>
                        @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                   }
                   else
                   {
                    @Html.DropDownListFor(model => model.UserId, Model.UserList.Count() == 0 ? Enumerable.Empty<SelectListItem>() : Model.UserList.Select(
                                   x => new SelectListItem()
                                   {
                                       Value = x.Id.ToString(),
                                       Text = x.EmployeeNumber + " " + x.FirstName + " " + x.LastName,
                                       Selected = x.Id == Model.UserId
                                   }), "Select User", new { @class = "form-control", @placeholder = "Select User", @disabled = "disabled" })
                    <span class="input-group-addon" id="basic-addon1"><i class="fa fa-chevron-down"></i></span>
                        @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                   }
                </div>
            </div>
        </div>
        <div class="form-group">
            @if (ViewBag.IsAddEdit)
            {
                <div>
                    <input type="button" id="adddept" title="Add Department Allocation" value="Add Department Allocation" class="pull-right btn btn-lg btn-theme bg_red">
                    <div class="clearfix"></div>
                </div>
           
            <fieldset>
                <legend>Last Active User Allocated Department</legend>
                <div id="divUserDepartment">
                  
                </div>
            </fieldset>
            }
            else
                {  
                <fieldset>
                    <legend>Requested User Allocated Department</legend>
                    <div id="divUserDepartment">
                        @if (Model.UserAllocatedDepartments != null)
                        {
                            foreach (var userAllocation in Model.UserAllocatedDepartments)
                            {
                                Html.RenderPartial("~/Views/Requisition/_UserAllocatedDepartment.cshtml", userAllocation);
                            }
                        }
                    </div>
                </fieldset>

            }
        </div>


        <div class="form-group text-center">
            @if (ViewBag.IsAddEdit)
            {
               <button class="btn btn-theme btn-blue" id="btnSave" type="button">Save</button>
            }
            <button type="button" class="btn btn-theme btn-red" id="btnCancel">Close</button>
        </div>



    </div>
}
<script type="text/javascript">
    
    
    $(document).ready(function () {

        $("#UserId").change(function (evt) {
             var id = $("#UserId").val();
             if (id != null && id != "")
             {
                $.ajax({
                     url: '/UserAllocation/GetAllUserAllocation/',
                    type: 'POST',
                    contentType: 'application/json',
                    data: "{userId:'" + id + "'}",
                    datatype:'json',
                    success: function (content) {
                        $('#divUserDepartment').append(content);
                     },
                    error: function (e) { }
                 });
             }
             else
             {
                $('#divUserDepartment').html('');
             }
         })

        $("#btnSave").click(function (evt) {
             var $form = $('.data_form');

             if ($form.valid()) {
                 AjaxCall($form.prop('action'), $form.prop('method'), $form.serialize(), OnSuccessAllocation);
             }
         })

        $("#btnCancel").click(function () {
             DTToggler(); $("#divOperations").empty();
         })

        $("#adddept").click(function () {

            $.ajax({
                 url: '/Requisition/AddDepartmentAllocation/',
                type: 'POST',
                contentType: 'application/html',
                //data: JSON.stringify(model),
                success: function (content) {
                    $('#divUserDepartment').append(content);
                 },
                error: function (e) { }
             });
         })
    });

     function OnSuccessAllocation(response)
    {
         if (response.Response) {
             DTToggler(); $("#divOperations").empty();
             oTable.fnDraw(false);
         }
         ALGritter('', response.Message, false, false, response.MessageClass);
     }
</script>
