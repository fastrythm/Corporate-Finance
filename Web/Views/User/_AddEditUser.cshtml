@using CorporateAndFinance.Core.Helper.Structure
@model CorporateAndFinance.Core.ViewModel.UserVM

@using (Html.BeginForm("AddEdit", "User", FormMethod.Post, new { @class = "data_form", autocomplete = "off" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal user_add">
        <h4>Add New User </h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id, new { htmlAttributes = new { @class = "form-control" } })

        <div>
            @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-4">
                @if (Model.Id != null && Model.Id != "0")
                {
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control", data_val = false })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                }
                else
                {
                    @Html.PasswordFor(model => model.Password, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                }
              
            </div>
        </div>
        <div>
            @Html.LabelFor(model => model.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-4">
                @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.EmployeeNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.EmployeeNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EmployeeNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Designation, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Designation, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.RequisitionID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
             

                    @if (!Model.RequisitionID.HasValue)
                    {   <div class="input-group">
                    @Html.DropDownListFor(model => model.RequisitionID, Model.RequisitionList.Count() == 0 ? Enumerable.Empty<SelectListItem>() : Model.RequisitionList.Select(
                          x => new SelectListItem()
                          {
                              Value = x.RequisitionID.ToString(),
                              Text =   Utility.FormatedId("UR-", Convert.ToString(x.RequisitionID)) + " : " + x.JobTitle,
                              Selected = x.RequisitionID == Model.RequisitionID
                          }),"Select Requisition", new { @class = "form-control", @placeholder = "Select Requisition" })

                    @Html.ValidationMessageFor(model => model.RequisitionID, "", new { @class = "text-danger" })
                   </div>
                    <span class="input-group-addon" id="basic-addon1"><i class="fa fa-chevron-down"></i></span>
                    }
                    else
                    {
                         @Html.TextBox(Utility.FormatedId("UR-", Convert.ToString(Model.RequisitionID)), Utility.FormatedId("UR-", Convert.ToString(Model.RequisitionID)), new { @class = "form-control", @readonly = "readonly" })
                    }

                </div>

        </div>
         
        <div>
 
                <input type="button" id="adddept"  title="Add Department" value="Add Department" class="pull-right btn btn-lg btn-theme bg_red">  
                <div class="clearfix"></div>
           
        </div>
       <div id="divUserDepartment">
           @if (Model.UserDepartments != null)
           { foreach (var userDepartment in Model.UserDepartments)
               {
                   Html.RenderPartial("_UserDepartment", userDepartment);
               }
           }
       </div>

        <div class="form-group">
            <label class="col-md-2 control-label">
                @Html.LabelFor(model => model.UserPermissions, htmlAttributes: new { @class = "" })
            </label>
            <div class="col-md-10">
                @foreach (CorporateAndFinance.Core.Helper.Structure.UserAppPermissions permission in Enum.GetValues(typeof(CorporateAndFinance.Core.Helper.Structure.UserAppPermissions)))
                {
                    <div class="col-md-4">
                        <label>@permission.ToString()</label>
                        @if (Model.UserPermissions != null && Model.UserPermissions.Contains(permission))
                    {
                            <input type="checkbox" style="-webkit-appearance: checkbox; !important" checked name="UserPermissions" value="@(permission.ToString())" id="@((int)permission)" />
                        }
                        else
                        {
                            <input type="checkbox" style="-webkit-appearance: checkbox; !important" name="UserPermissions" value="@(permission.ToString())" id="@((int)permission)" />
                        }
                    </div>
                }
                </div>
            </div>
        <div class="form-group text-center">

            <button class="btn btn-theme btn-blue" id="btnSave" type="button">Save</button>
            <button type="button" class="btn btn-theme btn-red" id="btnCancel">Close</button>
        </div>
    </div>
    
  
}
 
<script type="text/javascript">


    $(document).ready(function () {

        $("#btnSave").click(function (evt) {
            var $form = $('.data_form');
              if ($form.valid()) {
                  AjaxCall($form.prop('action'), $form.prop('method'), $form.serialize(), OnSuccessUser);
              }
        })

        $("#btnCancel").click(function () {
            DTToggler(); $("#divOperations").empty();
        })

        $("#adddept").click(function () {

          //  $('#divUserDepartment').append('@(Url.Action("AddDepartment", "User", null, Request.Url.Scheme))');
 

            $.ajax({
                url: '/User/AddDepartment/',
                type: 'POST',
                contentType: 'application/html',
                //data: JSON.stringify(model),
                success: function (content) {
                    $('#divUserDepartment').append(content);
                },
                error: function (e) { }
            });
        })
    });



    function OnSuccessUser(response)
    {
        if (response.Response) {
            DTToggler(); $("#divOperations").empty();
            oTable.fnDestroy();
            InitializeUserList();

        }
        ALGritter('', response.Message, false, false, response.MessageClass);
    }



</script>

 